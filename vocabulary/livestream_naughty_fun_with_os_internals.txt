Eh, Eh, Eh, eh. 

So, um, first we're going to look at putting a bit pattern hot into the vga memory. Um, we're using in out io port instructions to access the Vga registers were, it's got four bit planes and we're setting, we're telling it to write to all four at once. With that, with this f right here means right to all for this we're telling it, we want the map register and then we're setting the map register to f, which is all four bit planes. And then we're going to a um, copy, um, oh, uh, one zero one zero, a stripe pattern into vga memory, which starts at um, this is regular memory address space. We identity map. So, um, it's an addresses and address. Now we're telling you at six 40 by 480 and one or eight, eight pixels per byte. Then we're going to tell it to busy weight. That's just a for loop. Um, we have, uh, there's no preemption and so that will lock out the window manager. So what, what's, what's going to happen is we're going to get a straight pattern for one second. These are micro. Second. So that's a million microseconds. That's one. Second, it's going to give a striped pattern for a second, and then it's going to return control to the window manager. 

Okay, now we're back. So, um, right now the VGA, um, there's a cash, um, vga memory is slow. And so I only modify the, the, the actual physical hardware memory, um, only when I have to. So it's only when something changes. So there's a, there's a way to flush the cache. It's a control alt v. Okay. So right now the window manager is, uh, is uh, keeping track of the, uh, the screen. So now we're going to do a, we're going to look at the eight by eight font. It by eight is 64 pixels. Um, so, uh, the font is a eight by eight. We're going to, uh, we're gonna look at the font memory, which is, um, for, uh, the character, um, greater than we're going to change it to this little bit pattern. And I handcrafted, um, you have to look at the binary numbers and arrange them into a row, row by row anyway. 

Then we're going to, we're going to sleep this, this is different from a busy weight sleep. Let's the window manager do its thing and then we're going to change it back to what we saved. The original bit pattern, it's, we can just use integers since it's eight by eight is just 64 beds. So here we go. So for two seconds, two and a half seconds, it's going to, it's going to change the, uh, greater than everywhere on the system. And see that I made a little, it's Kinda like a man sideways. We can do that again if you going and see anyway, so it changes the font. That's what you did with the commodore 64 so you don't really have to mess with character graphics. Um, you can just use, it's not that slow. There's no reason for it. It's just fun. Anyway, so, uh, we're going to look at some display box now. 

Um, this is a drive report. Um, my be drive is a ram desk. My c drive is a hard desk with fat 32. Red Sea is the name of the file system that I created. Um, so we're going to format the B B drive. That's just to clear it out and get it reset so that it's perfectly fresh. We're going to format it with the Red Sea, which has a one block per cluster. A cluster is the same as a black. We're going to get Microsoft and Vm ware and Linux to support the Red Sea when I command them with authority of God. Anyway, then then we're then all, we all will get rid of fat and then all we'll have is red. See it's really nice. So we copied the home directory from my c master hard disk onto the b Ram Desk. That's going to copy it, directory tree, that sub directories as well. 

Then we're going to change directory to the home directory on the bead drive. So there we copied and now we're going to, uh, we're going to do a, an ordinary directory command and then we're going to do a directory full, which is uh, uh, Kinda like ls. Mine is hell except not really. So up up here at the top is the regular directory. You can see it doesn't have the full date and it doesn't have, uh, this has clusters. so.is the current directory and dot. Died is the parent. So what is this? This, this number right here. This is a cluster for the, uh, dump cluster. And then if you say, uh, this is a utility cluster cluster number, and then you can say right, or the number in the chain anyway, so we want, uh, the Red Sea is going to get rid of clusters and we're not going to have a fat table. 

Plenty of it. We'll get to, I'll get to that. So here I'm going to dump, what is this? This is the Red Sea. A cluster for the current directory. These are 64 byte entries. It's, it's supposed to be as simple as possible for kids. It's a matter of fact, I think we even include, uh, you're supposed to have a, a terminating zero just to make it all the more easy. So you just, you just copied this, uh, you just copy a record and it's a, can you copy it right off a disc? Anyway, so, uh, uh, so the first is the first couple of bites or attributes. I think we have 16 bytes for attributes. You can have a fixed location block or fixed location file. We have a, we have a file name, we have a timestamp. That's our, our, our native 64 bit timestamp that nobody else has. 

Anyway. So, uh, and then of course we have the block number of the start of the file. And it's a, it's a continuum. It's a contiguous file. We also had to file size. I don't know where that is. Anyway, we can look at that if we're really wanting to dir entry. Uh, this is the start here. We're using a zero size, uh, integer. You might wonder why we have a zero size and nigger. Well, that's so we can put a start, um, uh, start in end of record. So he can do, you can use this label as a start and then you do a bulk copy. We just copied this straight down to the disc. Um, 16 bits of attributes and a, the file name is up to 38. That's it folks. No more. Um, cluster number is 64 bit and size is 64 bit in deep time is 64 bit what it is, the date time is 32 bits of date in 32 bits of time. Um, so 24 hours is 32 bits. And so it turns out to be, I think, uh, I forgot if you want to find out, take a 1.0 divided by one, shipped over 32 and a 

I don't think that's right. Yeah. Oh, oh, of course. Okay. So, uh, 

let's do this. Let's start over. One shift over 32 bits divided by six 24 hours divided by 60 minutes divided by 60 seconds. And this gives us a, yeah, that's what I wanted. So we have a resolution of a 49 thousands of a second. And if you want to know date, um, we have, uh, one we have, the date is the uh, upper 32 bits. So you can just add, add one. And it advances one day. We don't have a structure with a month dating and stuff like that. We just have a contiguous. So, um, if we divide this by three 65, we have around, uh, um, so we can store, I dunno if this is correct, oh, 11, 11 million years before the next, but epic e book. Anyways, so, uh, now, uh, we can also say don't block. Um, like I said with this file system, a block is the same as a cluster. The, the, the main design criteria was simplicity so that people can go in here. It's a matter of fact, if we say don't pull the true, we can modify. It's gonna, it's gonna write the, uh, it's going to write the block when we hit escape. So what we can do is come over here and let's, let's just do blog blog Ahmad, modifying the directory block. Now if I hit escape, it writes it off. I do a directory. 

Oh, I didn't hit escape. 

Okay, well, I blogged budget, budget, Code Code, Ms. Smith. So I, uh, I modified the directory by hand. The police aren't too happy with people knowing what a disk block is. But God said it's our ancestral land and that's, they're just going to have to live with it. I, as a matter of fact, I want people to look at the windows blocks because that's, you don't want ignorant people. That's, that's like, that's evil. That's an evil. Keeping people ignorant in that him doing sting operations on poor. It's like just wolves eating children or something. I don't know. Anyways, so, uh, so, uh, let's see what else we have here. Now we're going to look at, uh, the, uh, the fs segment register. Okay. So, uh, we're turning on the compiler trace and we're entering an expression. You can use this as a calculator. Three plus four, seven. Um, it simplifies the expression. The compiler simplifies constants. And then, uh, if we say, hi, I equals three plus I didn't initialize it, but I'm just showing you what the code is. So this compiles, these are, uh, these are in well, 

64 bit values added to a global variable. We don't have volatile, um, we never use a register. Global variables. Local variables are registered but not global. Anyway. So, uh, uh, so we, I just wanted to show that we have the compiler turned on the compiler trace, we can do a directory, you can see what a directory command is. It pushes some strings. So some of this code gets free diff. It's no longer needed. Um, otherwise if you make a function, it stays around in memory. Um, so, uh, you eventually have to reboot. But that's what we're trying to be a common or a 64. That's not pathetic and it's modern 64 bit. Anyway, so, uh, let's see what else we have here. Uh, now we're going to look at the fs is the uh, fs segment registered. This is a, you probably don't know assembly language, but there's a, um, there are registers, which are little things that, a whole values, and this is kind of a, um, I'm using it like a register. 

It used to be something different, but now it's, it's, it's been kind of a, it, it barely functions and I'm, I made use of it, but most people can't make use of it. So I use it for the, uh, the, uh, current task record. You see this number up here in the corner, seven f d nine, two, two, eight. Um, when I said fs that printed a global variable, it's actually, it's a register. Um, Alex, it's kind of tricky how it actually did this, but anyway, you see that two to eight, you can see it's the same number. So that's, we don't have process ids. We have, uh, we have the address of a task record. Um, so, uh, the rip is a register and the task record, um, we're going to look at the task record here in a second. Um, we're going to turn off tracing and, uh, we're going to do a man page on c task. 

That's just a, um, anyway, c task is a task record. So fs is a pointer to a task record and you have the registers that gets stored when you saved the context. You have the, you have the current directory, current derive and current directory. Um, you have, uh, when you make an exception, it's, that starts nestling the exceptions that, um, it's, it's tied in. The compiler is tied in with the, uh, everything's tied together. These tasks record. Um, there was no separation. It's, it's not really that big. And there's a saying a Stalin said quantity has a quality all its own. And if you keep it small and you can get away with, uh, without, you can get away with a pretty gnarly, this is kind of gnarly. It's kind of lots of different things. It's not that much though. It's pretty small. So, uh, now we're going to dump the memory, the size of the task record fs. 

So this is the task record and, uh, that's a static dump. This is a, this is a static text. Now we're going to, um, we're going to do a document, don't, this is getting into our, uh, if you're familiar with the temple o s um, you have, uh, the dollar sign is a special escaped for a document features. This is a, uh, you can see it lit up and it's changing. This is a dynamic, a widget that um, that's a special thing. Is that called the heck a hex edit widget. It's refreshed 30 times a second one. The screens updated. Um, this task doesn't change that often. Anyway, so, um, now we're going to do a, a class rep, which is uh, uh, deny dynamic. This is using the, uh, all the, all the information and all the tasks on other classes that you compile. 

The member variables are stored in memory and some of these debug routines will, will automatically figure out what kind of class it is and what the member variables are. And this is dynamic. So, uh, you can see these changing off as big scroll around. This is the, um, window coordinates of this task there. Um, on core zero art, your, um, core zero is where everything is done. The only reason the other cores are used as if they're slaves for a, um, for an effort. If you have a job for the slaves to do, then you do it explicitly. Otherwise everything's on core zero. So if you run applications, they're on core zero and then they, they, they create slaves on the other cores. So, um, of course zero is the only, there's one window per task maximum and a one window per task. And, uh, watch this, I'm going to change the window. I just, uh, I live window left. I changed the, um, I, I can, I can change the window position. These are eight by eight grid positions anyway, so, uh, 

mmm. 

So one, one window per task. Um, only core zero can have windows. The other, the other slave tasks don't have windows and applications are core zero anyway. So it's mostly for one application at a time. You can run more than one, but it doesn't have any kind of sharing for disks. So if one hogs the desk, that's it. That's, it's, it's, um, instead of optimizing for a mainframe multiuser we optimize for one user where you only want to play one video game at a time. So we optimize for one video game at a time instead of, um, we tried to keep the code simple and, um, so we, it doesn't do sharing. 

Uh, 

it's pretty sick. It will just, uh, 

it will have poor sharing doesn't play nicely, but it doesn't really crash. That's pretty safe when it comes to a locking down the heaps and devices and stuff. They're all safe. They just don't share. So now we're going to look at, um, we're going to change the current directory, which is a, which is a character pointer in the character pointer in the, uh, in the task record. Then we're going to Maliki it, a fixed buffer. We don't do it like this. Normally, normally we do a variable length and then we're going to copy string copy. Demo Games is a directory or any copy that, so watch this, look at that. We changed the directory, uh, by hand, which is a horrible abuse of power. But that's the power you have with this. It's a matter of fact, uh, if you want to, uh, if you want to access another task, interprocess communication is a joke. It's like there's nothing stopping you. So if you have a home, if I have a variable here, I 64 I and I say address the eye and then I come over here and I'd take this point, her address, and then I come over here and I say, uh, I 64 star j equals zero x. 

So I just said a pointer, no face stays dark. Jay was one, two, three, four, five. And then if I come over here and I say, I, I just changed that variable. It's just a memory location anyway, so I can also, uh, I can also say crosstalk a crosstalk. And if like give the process id, which is a, that's the address of the task record. So zero x seven ft ffd nine a c two eight. I can, I can tell it. Um, this is a, I can put characters into his keyboard buffer. It's kind of a, there used to be a pr, there's a, there's a term for wires are getting crossed anyway. So, um, what I just did is I sent characters to his buffer. Anyway, we're going to do one more thing I think before we're done here. Let's see. Maybe we're done. 

Let's see. Yeah, we're done. Okay, so this is a, the common or 64, one of the major, um, what it was used for, it was playing around and learning and poking and getting in and breaking stuff that your, that was the fun instead of a video game. He just played around with this stuff. And, uh, that's, that's, that's our ancestral land where we were, we have a divine right to this, like the Jews had a right to their homeland. Um, we have a divine right to this low level access. We're supposed to have access to ports and memory and disk blocks and all of that is our divine right as a commodore 64 Americans in our ancestor descending.